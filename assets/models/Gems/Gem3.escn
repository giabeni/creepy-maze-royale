[gd_scene load_steps=1 format=2]

[sub_resource id=1 type="Shader"]

resource_name = "Shader Nodetree"
code = "shader_type spatial;
render_mode blend_mix, depth_draw_always, cull_back, diffuse_burley, specular_schlick_ggx;

uniform vec2 refraction_offset = vec2(0.2, 0.2);


void node_bsdf_glass(vec4 color, float roughness, float IOR, out vec3 albedo,
        out float alpha, out float specular_out, out float roughness_out,
        out float transmission_out, out float ior) {
    albedo = color.rgb;
    alpha = 0.0;
    specular_out = pow((IOR - 1.0)/(IOR + 1.0), 2)/0.08;
    roughness_out = roughness;
    transmission_out = 0.0;
    ior = IOR;
}


void refraction_fresnel(vec3 view_dir, vec3 normal, float ior, out float kr) {
// reference [https://www.scratchapixel.com/lessons/
// 3d-basic-rendering/introduction-to-shading/reflection-refraction-fresnel]
    float cosi = clamp(-1.0, 1.0, dot(view_dir, normal));
    float etai = 1.0, etat = ior;
    if (cosi > 0.0) {
        float tmp = etai;
        etai = etat;
        etat = tmp;
    }
    // Compute sini using Snell's law
    float sint = etai / etat * sqrt(max(0.0, 1.0 - cosi * cosi));
    // Total internal reflection
    if (sint >= 1.0) {
        kr = 1.0;
    }
    else {
        float cost = sqrt(max(0.0, 1.0 - sint * sint));
        cosi = abs(cosi);
        float Rs = ((etat * cosi) - (etai * cost))
                    / ((etat * cosi) + (etai * cost));
        float Rp = ((etai * cosi) - (etat * cost))
                    / ((etai * cosi) + (etat * cost));
        kr = (Rs * Rs + Rp * Rp) * 0.5;
    }
}

void vertex () {
}

void fragment () {
	
	// node: 'Glass BSDF'
	// type: 'ShaderNodeBsdfGlass'
	// input sockets handling
	vec4 node0_in0_color = vec4(0.8000000715255737, 0.061576567590236664,
		0.021819932386279106, 1.0);
	float node0_in1_roughness = float(0.0);
	float node0_in2_ior = float(1.4500000476837158);
	vec3 node0_in3_normal = NORMAL;
	// output sockets definitions
	vec3 node0_bsdf_out0_albedo;
	float node0_bsdf_out1_alpha;
	float node0_bsdf_out2_specular;
	float node0_bsdf_out3_roughness;
	float node0_bsdf_out4_transmission;
	float node0_bsdf_out5_ior;
	
	node_bsdf_glass(node0_in0_color, node0_in1_roughness, node0_in2_ior,
		node0_bsdf_out0_albedo, node0_bsdf_out1_alpha, node0_bsdf_out2_specular,
		node0_bsdf_out3_roughness, node0_bsdf_out4_transmission, node0_bsdf_out5_ior);
	
	
	ALBEDO = node0_bsdf_out0_albedo;
	SPECULAR = node0_bsdf_out2_specular;
	ROUGHNESS = node0_bsdf_out3_roughness;
	NORMAL = node0_in3_normal;
	// uncomment it when you need it
	// TRANSMISSION = vec3(1.0, 1.0, 1.0) * node0_bsdf_out4_transmission;
	refraction_fresnel(VERTEX, NORMAL, node0_bsdf_out5_ior, node0_bsdf_out1_alpha);
	EMISSION += textureLod(SCREEN_TEXTURE, SCREEN_UV - NORMAL.xy * refraction_offset
		, ROUGHNESS).rgb * (1.0 - node0_bsdf_out1_alpha);
	ALBEDO *= node0_bsdf_out1_alpha;
	ALPHA = 1.0;
}
"

[sub_resource id=2 type="ShaderMaterial"]

resource_name = ""
shader = SubResource(1)

[sub_resource id=3 type="ArrayMesh"]

resource_name = "Cube003"
surfaces/0 = {
	"material":SubResource(2),
	"primitive":4,
	"arrays":[
		Vector3Array(0.157029, 0.0398809, 0.157029, -0.157029, 0.0398809, 0.157029, 0.0, -0.490807, 0.0, 0.157029, 0.0398809, -0.157029, 0.157029, 0.0398809, 0.157029, 0.0, -0.490807, 0.0, -0.157029, 0.0398809, -0.157029, 0.157029, 0.0398809, -0.157029, 0.0, -0.490807, 0.0, -0.157029, 0.0398809, 0.157029, -0.157029, 0.0398809, -0.157029, 0.0, -0.490807, 0.0, 0.0, 0.331284, 0.0, -0.157029, 0.0398809, 0.157029, 0.157029, 0.0398809, 0.157029, 0.0, 0.331284, 0.0, 0.157029, 0.0398809, 0.157029, 0.157029, 0.0398809, -0.157029, 0.0, 0.331284, 0.0, 0.157029, 0.0398809, -0.157029, -0.157029, 0.0398809, -0.157029, 0.0, 0.331284, 0.0, -0.157029, 0.0398809, -0.157029, -0.157029, 0.0398809, 0.157029),
		Vector3Array(0.0, -0.283736, 0.958902, 0.0, -0.283736, 0.958902, 0.0, -0.283736, 0.958902, 0.958902, -0.283736, 0.0, 0.958902, -0.283736, 0.0, 0.958902, -0.283736, 0.0, 0.0, -0.283736, -0.958902, 0.0, -0.283736, -0.958902, 0.0, -0.283736, -0.958902, -0.958902, -0.283736, 0.0, -0.958902, -0.283736, 0.0, -0.958902, -0.283736, 0.0, 0.0, 0.47438, 0.88032, 0.0, 0.47438, 0.88032, 0.0, 0.47438, 0.88032, 0.88032, 0.47438, 0.0, 0.88032, 0.47438, 0.0, 0.88032, 0.47438, 0.0, 0.0, 0.47438, -0.88032, 0.0, 0.47438, -0.88032, 0.0, 0.47438, -0.88032, -0.88032, 0.47438, 0.0, -0.88032, 0.47438, 0.0, -0.88032, 0.47438, 0.0),
		FloatArray(-1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, -1.0, 1.0, -0.4286, -0.795364, 0.4286, 1.0, -0.4286, -0.795364, 0.4286, 1.0, -0.4286, -0.795364, 0.4286, 1.0, 0.4286, -0.795364, 0.4286, 1.0, 0.4286, -0.795364, 0.4286, 1.0, 0.4286, -0.795364, 0.4286, 1.0, 0.4286, -0.795364, -0.4286, 1.0, 0.4286, -0.795364, -0.4286, 1.0, 0.4286, -0.795364, -0.4286, 1.0, -0.4286, -0.795364, -0.4286, 1.0, -0.4286, -0.795364, -0.4286, 1.0, -0.4286, -0.795364, -0.4286, 1.0),
		null, ; no Vertex Colors,
		Vector2Array(-1.30281, 0.994216, 0.998123, 0.994216, 0.998123, -1.30672, -1.30281, 0.994216, 0.998123, 0.994216, 0.998123, -1.30672, -1.30281, 0.994216, 0.998123, 0.994216, 0.998123, -1.30672, -1.30281, 0.994216, 0.998123, 0.994216, 0.998123, -1.30672, -1.30281, 0.994216, 0.998123, 0.994216, 0.998123, -1.30672, -1.30281, 0.994216, 0.998123, 0.994216, 0.998123, -1.30672, -1.30281, 0.994216, 0.998123, 0.994216, 0.998123, -1.30672, -1.30281, 0.994216, 0.998123, 0.994216, 0.998123, -1.30672),
		null, ; No UV2,
		null, ; No Bones,
		null, ; No Weights,
		IntArray(0, 2, 1, 3, 5, 4, 6, 8, 7, 9, 11, 10, 12, 14, 13, 15, 17, 16, 18, 20, 19, 21, 23, 22)
	],
	"morph_arrays":[]
}

[node type="Spatial" name="Scene"]

[node name="Gem3" type="MeshInstance" parent="."]

mesh = SubResource(3)
visible = true
transform = Transform(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, -0.642574, 0.0953829, 0.0911244)
